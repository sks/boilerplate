// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"gorm.io/gorm"
	"io.github.com/sks/services/pkg/repository"
)

type FakeIBaseRepo struct {
	DBStub        func(context.Context) *gorm.DB
	dBMutex       sync.RWMutex
	dBArgsForCall []struct {
		arg1 context.Context
	}
	dBReturns struct {
		result1 *gorm.DB
	}
	dBReturnsOnCall map[int]struct {
		result1 *gorm.DB
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIBaseRepo) DB(arg1 context.Context) *gorm.DB {
	fake.dBMutex.Lock()
	ret, specificReturn := fake.dBReturnsOnCall[len(fake.dBArgsForCall)]
	fake.dBArgsForCall = append(fake.dBArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DBStub
	fakeReturns := fake.dBReturns
	fake.recordInvocation("DB", []interface{}{arg1})
	fake.dBMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIBaseRepo) DBCallCount() int {
	fake.dBMutex.RLock()
	defer fake.dBMutex.RUnlock()
	return len(fake.dBArgsForCall)
}

func (fake *FakeIBaseRepo) DBCalls(stub func(context.Context) *gorm.DB) {
	fake.dBMutex.Lock()
	defer fake.dBMutex.Unlock()
	fake.DBStub = stub
}

func (fake *FakeIBaseRepo) DBArgsForCall(i int) context.Context {
	fake.dBMutex.RLock()
	defer fake.dBMutex.RUnlock()
	argsForCall := fake.dBArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIBaseRepo) DBReturns(result1 *gorm.DB) {
	fake.dBMutex.Lock()
	defer fake.dBMutex.Unlock()
	fake.DBStub = nil
	fake.dBReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeIBaseRepo) DBReturnsOnCall(i int, result1 *gorm.DB) {
	fake.dBMutex.Lock()
	defer fake.dBMutex.Unlock()
	fake.DBStub = nil
	if fake.dBReturnsOnCall == nil {
		fake.dBReturnsOnCall = make(map[int]struct {
			result1 *gorm.DB
		})
	}
	fake.dBReturnsOnCall[i] = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeIBaseRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dBMutex.RLock()
	defer fake.dBMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIBaseRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.IBaseRepo = new(FakeIBaseRepo)
